/******************************************
Treehouse FSJS Techdegree:
project 1 - A Random Quote Generator
******************************************/

// For assistance: 
  // Check the "Project Resources" section of the project instructions
  // Reach out in your Slack community - https://treehouse-fsjs-102.slack.com/app_redirect?channel=chit-chat

/*** 
 * `quotes` array: an array of quote objects.
 * @property {string} quote       - this is the content of the quote. 
 * @property {string} source      - this is the speaker of the quote. 
 * @property {string} [citation]  - this is where the quote comes from. could be null. 
 * @property {string} [year]      - this is year the quote occured. could be null 
***/
const quotes = [
  {
    quote:'Every great developer you know got there by solving problems they were unqualified to solve until they actually did it.',
    source:'Patrick McKenzie',citation:'Twitter',year:'2016'
  },
  {
    quote:'Being deeply loved by someone gives you strength, while loving someone deeply gives you courage.',
    source:'Lao Tzu',citation:null,year:'6th century B.C.',
    tags: ['Philosophy','Poetry']
  },
  {
    quote:'Life is a series of natural and spontaneous changes. Don\'t resist them; that only creates sorrow. Let reality be reality. Let things flow naturally forward in whatever way they like.',
    source:'Lao Tzu',citation:null,year:'6th century B.C.',
    tags: ['Philosophy','Poetry']
  },
  {
    quote:'Those who know do not speak. Those who speak do not know',
    source:'Lao Tzu',citation:'Tao Te Ching',year:'6th century B.C.',
    tags: ['Philosophy','Poetry']
  },
  {
    quote:'When you are content to be simply yourself and don\'t compare or compete, everyone will respect you.',
    source:'Lao Tzu',citation:'Tao Te Ching',year:'6th century B.C.',
    tags: ['Philosophy','Poetry']
  },
  {
    quote:'We have two ears and one tongue so that we would listen more and talk less.',
    source:'Diogenes',citation:null,year:'404—323 B.C.E.',
    tags: ['Philosophy','Cynicism']
  },
  {
    quote:'He has the most who is most content with the least.',
    source:'Diogenes',citation:null,year:'404—323 B.C.E.',
    tags: ['Philosophy','Cynicism']
  },
  {
    quote:'Stand a little less between me and the sun.',
    source:'Diogenes',citation:null,year:'404—323 B.C.E.',
    tags: ['Philosophy','Cynicism']
  },
  {
    quote:'I know nothing, except the fact of my ignorance.',
    source:'Diogenes',citation:null,year:'404—323 B.C.E.',
    tags: ['Philosophy','Cynicism']
  },
  {
    quote:'Of course I ain\'t gonna fight, but I ain\'t gonna run.',
    source:'Christopher Walken as Hans',citation:'Seven Psychopaths',year:'2012',
    tags: ['Comedy','Films','Television']
  },
  {
    quote:'Life happens wherever you are, whether you make it or not.',
    source:'Uncle Iroh',citation:'Avatar, The Last Airbender',year:'2005-2008',
    tags: ['Philosophy','Series','Television']
  },
  {
    quote:'Failure is only the opportunity to begin again. Only this time, more wisely.',
    source:'Uncle Iroh',citation:'Avatar, The Last Airbender',year:'2005-2008',
    tags: ['Philosophy','Series','Television']
  },
  {
    quote:'Sometimes the best way to solve your own problems is to help someone else',
    source:'Uncle Iroh',citation:'Avatar, The Last Airbender',year:'2005-2008',
    tags: ['Philosophy','Series','Television']
  },
  {
    quote:'When you\'re in your darkest place, you give yourself hope and that\'s inner strength',
    source:'Uncle Iroh',citation:'Avatar, The Last Airbender',year:'2005-2008',
    tags: ['Philosophy','Series','Television']
  },
  {
    quote:'The Best Tea Tastes Delicious Whether It Comes In A Porcelain Pot Or A Tin Cup.',
    source:'Uncle Iroh',citation:'Avatar, The Last Airbender',year:'2005-2008',
    tags: ['Philosophy','Series','Television']
  },
  {
    quote:'It\'s Important To Draw Wisdom From Many Different Places... If We Take It From Only One Place It Becomes Rigid And Stale.',
    source:'Uncle Iroh',citation:'Avatar, The Last Airbender',year:'2005-2008',
    tags: ['Philosophy','Series','Television']
  },
  {
    quote:'I\'m such a perfectionist that I\'d kinda rather not do it at all than do a crappy version.',
    source:'Ryan Howard',citation:'The Office',year:'2005-2013',
    tags: ['Comedy','Series','Television']
  },
];

/*** 
 * `QUOTE_DISPLAY_HISTORY` array
 * A historical list of indexes generated by the getRandomQuote
 * Used in combination with the `MAX_HISTORY_SIZE` variable
 * to ensure that any specific quote does not repeat for a set number of clicks.
***/
const colors = [
  '#C0392B',
  '#EC7063',
  '#9B59B6',
  '#4A235A',
  '#2980B9',
  '#154360',
  '#1ABC9C',
  '#0E6251',
  '#27AE60',
  '#186A3B',
  '#D4AC0D',
  '#7D6608',
  '#F39C12',
  '#9C640C',
  '#E67E22',
  '#935116',
  '#D35400',
  '#873600',
  '#979A9A',
  '#626567',
  '#424949',
  '#34495E',
  '#1B2631',
  '#566573',
  '#1C2833',
];

/*** 
 * `COLOR_DISPLAY_HISTORY` array
 * A historical list of indexes generated by the getRandomQuote
 * Used in combination with the `MAX_HISTORY_SIZE` variable
 * to ensure that any specific quote does not repeat for a set number of clicks.
***/
const COLOR_DISPLAY_HISTORY = [0];

/*** 
 * `QUOTE_DISPLAY_HISTORY` array
 * A historical list of indexes generated by the getRandomQuote
 * Used in combination with the `MAX_HISTORY_SIZE` variable
 * to ensure that any specific quote does not repeat for a set number of clicks.
***/
const QUOTE_DISPLAY_HISTORY = [0];

/*** 
 * `QUOTE_REFRESH_INTERVAL_LENGTH` int
 * The number of seconds waited before a quote is auto-refreshed.
***/
const QUOTE_REFRESH_INTERVAL_LENGTH = 5;


/***
 * `getRandomIndex` function:
 * gets a random index from the given container. 
 * Uses the `MAX_HISTORY_SIZE` variable to define a minimum interval between the generation of any given index.
 * If the `MAX_HISTORY_SIZE` is greater than the number of elements in the container, 
 * then the history limit will default to length of the container minus 1 (container.length - 1).
 * Please note that this does not mean that an index WILL repeat, only that it WILL NOT repeat for the specified interval.
 * 
 * @param {Array} container - array of items to generate an index for.
 * @param {Array} history - array of indexes recently generated for this container.
 * @param {int} [historyLimit=7] - The maximum number of elements to allow in the `history` container,
 *                                 This value determines the minimum interval between the generation of a specific index.
 *  ex: historyLimit = 7, if 1 is generated the first time this function is called, 
 *      this function must be called a minimum of 7 times before 1 can be generated again.
 * 
 * @returns {int} index - a randomly generated index within the bounds of the given container, and not currently in the array of historical indexes.
***/
function getRandomIndex(container, history, historyLimit = 7){

  if(historyLimit > container.length){
    historyLimit = container.length;
  }

  const maxIndex = container.length;
  const generator = () => Math.floor(Math.random() * maxIndex );

  let index = generator();
  
  while(history.includes(index)){
    index = generator();
  }
  
  history.push(index);
  
  if(history.length > historyLimit) {
    history.shift();
  }
  
  return index;
}

/***
 * `getRandomQuote` function:
 * Gets a random quote object from the quotes array.
 * Utilizes the `getRandomIndex` function to generate an index, 
 * and the the `QUOTE_DISPLAY_HISTORY` array to ensure that any given quote does not repeat for a specified interval.
 * 
 * @param {int} [historyLimit=7] - The maximum number of elements to allow in the `history` container,
 *                                 This value determines the minimum interval between the generation of a specific index.
 *  - ex: historyLimit = 7, if 1 is generated the first time this function is called, 
 *        this function must be called a minimum of 7 times before 1 can be generated again.
 * 
 * @returns {Object} quotes[i] - a randomly generated index of the quotes array.
***/
function getRandomQuote(){

  let index = getRandomIndex(quotes, QUOTE_DISPLAY_HISTORY);

  return quotes[index];

}

/***
 * `getRandomColor` function:
 * Gets a random color object from the colors array.
 * Utilizes the `getRandomIndex` function to generate an index, 
 * and the the `COLOR_DISPLAY_HISTORY` array to ensure that any given quote does not repeat for a specified interval.
 * 
 * @param {int} [historyLimit=7] - The maximum number of elements to allow in the `history` container,
 *                                 This value determines the minimum interval between the generation of a specific index.
 *  - ex: historyLimit = 7, if 1 is generated the first time this function is called, 
 *        this function must be called a minimum of 7 times before 1 can be generated again.
 * 
 * @returns {string} color[i] - a randomly generated index of the colors array.
***/
function getRandomColor(){

  let index = getRandomIndex(colors, COLOR_DISPLAY_HISTORY);

  return colors[index];
}


/***
 * `printQuote` function:
 * Retrieves a random quote using the `getRandomQuote` function, 
 * Retrieves a random color using the `getRandomColor` function, 
 * builds an HTML string based on the retrieved quote object,
 * sets the innerHTML of the `quote-box` to the generated HTML string,
 * and creates a refresh interval, which is reset on each call.
 * @returns {Void} void
***/
function printQuote(){
  const quote = getRandomQuote();
  const color = getRandomColor();

  let htmlString = `
    <p class="quote"> ${quote.quote} </p>
    <p class="source"> ${quote.source} 
  `;

  if(quote.citation){
    htmlString += `
      <span class="citation"> ${quote.citation} </span>
    `;
  }
  if(quote.year){
    htmlString += `
      <span class="year"> ${quote.year} </span>
    `;
  }

  htmlString += '</p>';
  
  document.body.style.backgroundColor = color;

  document.getElementById('quote-box').innerHTML = htmlString; 
  
  if(quote.tags){
    let tagsHtmlString = '';
    for(let i in quote.tags){
      tagsHtmlString += `<div class="tag" style="color:${color};" >${quote.tags[i]}</div>`
    }
    
    document.getElementById('tags').innerHTML = tagsHtmlString; 
  }
  
  if (window.QUOTE_REFRESH_INTERVAL) {
    clearInterval(window.QUOTE_REFRESH_INTERVAL);
  }
  
  window.QUOTE_REFRESH_INTERVAL = setInterval(printQuote,QUOTE_REFRESH_INTERVAL_LENGTH*1000);
}


window.onload = printQuote;

/***
 * click event listener for the print quote button
 * DO NOT CHANGE THE CODE BELOW!!
***/

document.getElementById('load-quote').addEventListener("click", printQuote, false);